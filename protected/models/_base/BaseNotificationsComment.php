<?php

/**
 * This is the model base class for the table "notifications_comment".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "NotificationsComment".
 *
 * Columns in table "notifications_comment" available as properties of the model,
 * followed by relations of table "notifications_comment" available as properties of the model.
 *
 * @property integer $id
 * @property integer $notification_id
 * @property string $comment
 * @property integer $from_id
 * @property string $from_admin
 * @property integer $to_id
 * @property string $to_admin
 * @property string $is_read
 * @property string $created_date
 * @property string $updated_date
 * @property string $status
 *
 * @property Notifications $notification
 */
abstract class BaseNotificationsComment extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'notifications_comment';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'NotificationsComment|NotificationsComments', $n);
	}

	public static function representingColumn() {
		return 'comment';
	}

	public function rules() {
		return array(
			array('notification_id, comment', 'required'),
			array('notification_id, from_id, to_id', 'numerical', 'integerOnly'=>true),
			array('from_admin, to_admin, is_read, status', 'length', 'max'=>1),
			array('created_date, updated_date', 'safe'),
			array('from_id, from_admin, to_id, to_admin, is_read, created_date, updated_date, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, notification_id, comment, from_id, from_admin, to_id, to_admin, is_read, created_date, updated_date, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'notification' => array(self::BELONGS_TO, 'Notifications', 'notification_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'notification_id' => null,
			'comment' => Yii::t('app', 'Comment'),
			'from_id' => Yii::t('app', 'From'),
			'from_admin' => Yii::t('app', 'From Admin'),
			'to_id' => Yii::t('app', 'To'),
			'to_admin' => Yii::t('app', 'To Admin'),
			'is_read' => Yii::t('app', 'Is Read'),
			'created_date' => Yii::t('app', 'Created Date'),
			'updated_date' => Yii::t('app', 'Updated Date'),
			'status' => Yii::t('app', 'Status'),
			'notification' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('notification_id', $this->notification_id);
		$criteria->compare('comment', $this->comment, true);
		$criteria->compare('from_id', $this->from_id);
		$criteria->compare('from_admin', $this->from_admin, true);
		$criteria->compare('to_id', $this->to_id);
		$criteria->compare('to_admin', $this->to_admin, true);
		$criteria->compare('is_read', $this->is_read, true);
		$criteria->compare('created_date', $this->created_date, true);
		$criteria->compare('updated_date', $this->updated_date, true);
		$criteria->compare('status', $this->status, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}