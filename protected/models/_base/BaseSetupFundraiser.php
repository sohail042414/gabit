<?php

/**
 * This is the model base class for the table "setup_fundraiser".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "SetupFundraiser".
 *
 * Columns in table "setup_fundraiser" available as properties of the model,
 * followed by relations of table "setup_fundraiser" available as properties of the model.
 *
 * @property integer $id
 * @property integer $ftype_id
 * @property integer $user_id
 * @property string $fundraiser_title
 * @property string $search_status
 * @property string $fundraiser_image
 * @property string $fundraiser_description
 * @property string $recipient_name
 * @property integer $recipient_age
 * @property string $recipient_sex
 * @property string $recipient_email
 * @property string $recipient_relationship
 * @property string $fundraiser_goal
 * @property string $fundraiser_amount_need
 * @property string $fundraiser_timeline
 * @property string $use_of_funds
 * @property string $funds_achieve
 * @property string $feature_flag
 * @property string $created_date
 * @property string $updated_date
 * @property string $status
 *
 * @property Donations[] $donations
 * @property FundraiserComment[] $fundraiserComments
 * @property FundraiserHug[] $fundraiserHugs
 * @property FundraiserType $ftype
 * @property Users $user
 */
abstract class BaseSetupFundraiser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'setup_fundraiser';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'SetupFundraiser|SetupFundraisers', $n);
	}

	public static function representingColumn() {
		return 'fundraiser_title';
	}

	public function rules() {
		return array(
			array('id,user_id, use_of_funds, funds_achieve, created_date', 'required'),
			array('id, user_id,ftype_id, recipient_age', 'numerical', 'integerOnly'=>true),
			array('fundraiser_title, fundraiser_image, fundraiser_description, recipient_name, recipient_email, recipient_relationship, fundraiser_goal', 'length', 'max'=>255),
			array('search_status, recipient_sex, status', 'length', 'max'=>1),
			array('fundraiser_amount_need', 'length', 'max'=>45),
			array('fundraiser_timeline, updated_date', 'safe'),
			array('ftype_id, fundraiser_title, search_status, fundraiser_image, fundraiser_description, recipient_name, recipient_age, recipient_sex, recipient_email, recipient_relationship, fundraiser_goal, fundraiser_amount_need, fundraiser_timeline, updated_date, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, ftype_id, fundraiser_title, search_status, fundraiser_image, fundraiser_description, recipient_name, recipient_age, recipient_sex, recipient_email, recipient_relationship, fundraiser_goal, fundraiser_amount_need, fundraiser_timeline, use_of_funds, funds_achieve, created_date, updated_date, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
            'donations' => array(self::HAS_MANY, 'Donations', 'fundraiser_id'),
            'fundraiserComments' => array(self::HAS_MANY, 'FundraiserComment', 'fundraiser_reference_id'),
            'fundraiserHugs' => array(self::HAS_MANY, 'FundraiserHug', 'fundraiser_id'),
			'ftype' => array(self::BELONGS_TO, 'FundraiserType', 'ftype_id'),
            'user' => array(self::BELONGS_TO, 'Users', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'ftype_id' => null,
            'user_id' => null,
			'fundraiser_title' => Yii::t('app', 'Fundraiser Title'),
			'search_status' => Yii::t('app', 'Search Status'),
			'fundraiser_image' => Yii::t('app', 'Fundraiser Image'),
			'fundraiser_description' => Yii::t('app', 'Fundraiser Description'),
			'recipient_name' => Yii::t('app', 'Recipient Name'),
			'recipient_age' => Yii::t('app', 'Recipient Age'),
			'recipient_sex' => Yii::t('app', 'Recipient Sex'),
			'recipient_email' => Yii::t('app', 'Recipient Email'),
			'recipient_relationship' => Yii::t('app', 'Recipient Relationship'),
			'fundraiser_goal' => Yii::t('app', 'Fundraiser Goal'),
			'fundraiser_amount_need' => Yii::t('app', 'Fundraiser Amount Need'),
			'fundraiser_timeline' => Yii::t('app', 'Fundraiser Timeline'),
			'use_of_funds' => Yii::t('app', 'Use Of Funds'),
			'funds_achieve' => Yii::t('app', 'Funds Achieve'),
            'feature_flag' => Yii::t('app', 'Feature Flag'),
			'created_date' => Yii::t('app', 'Created Date'),
			'updated_date' => Yii::t('app', 'Updated Date'),
			'status' => Yii::t('app', 'Status'),
			'ftype' => null,
            'donations' => null,
            'fundraiserComments' => null,
            'fundraiserHugs' => null,
            'ftype' => null,
            'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('ftype_id', $this->ftype_id);
        $criteria->compare('user_id', $this->user_id);
		$criteria->compare('fundraiser_title', $this->fundraiser_title, true);
		$criteria->compare('search_status', $this->search_status, true);
		$criteria->compare('fundraiser_image', $this->fundraiser_image, true);
		$criteria->compare('fundraiser_description', $this->fundraiser_description, true);
		$criteria->compare('recipient_name', $this->recipient_name, true);
		$criteria->compare('recipient_age', $this->recipient_age);
		$criteria->compare('recipient_sex', $this->recipient_sex, true);
		$criteria->compare('recipient_email', $this->recipient_email, true);
		$criteria->compare('recipient_relationship', $this->recipient_relationship, true);
		$criteria->compare('fundraiser_goal', $this->fundraiser_goal, true);
		$criteria->compare('fundraiser_amount_need', $this->fundraiser_amount_need, true);
		$criteria->compare('fundraiser_timeline', $this->fundraiser_timeline, true);
		$criteria->compare('use_of_funds', $this->use_of_funds, true);
		$criteria->compare('funds_achieve', $this->funds_achieve, true);
        $criteria->compare('feature_flag', $this->feature_flag, true);
		$criteria->compare('created_date', $this->created_date, true);
		$criteria->compare('updated_date', $this->updated_date, true);
		$criteria->compare('status', $this->status, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}