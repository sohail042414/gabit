<?php

/**
 * This is the model base class for the table "comment".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Comment".
 *
 * Columns in table "comment" available as properties of the model,
 * followed by relations of table "comment" available as properties of the model.
 *
 * @property integer $id
 * @property string $content
 * @property string $status
 * @property string $created_date
 * @property string $updated_date
 * @property string $author
 * @property string $email
 * @property string $url
 * @property integer $post_id
 *
 * @property Post $post
 */
abstract class BaseComment extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'comment';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Comment|Comments', $n);
	}

	public static function representingColumn() {
		return 'content';
	}

	public function rules() {
		return array(
			array('content, author, email, post_id', 'required'),
			array('post_id', 'numerical', 'integerOnly'=>true),
			array('status', 'length', 'max'=>1),
			array('email', 'email'),

			array('author, email, url', 'length', 'max'=>128),
			array('created_date, updated_date', 'safe'),
			array('status, created_date, updated_date, url', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, content, status, created_date, updated_date, author, email, url, post_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'post' => array(self::BELONGS_TO, 'Post', 'post_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'content' => Yii::t('app', 'Content'),
			'status' => Yii::t('app', 'Status'),
			'created_date' => Yii::t('app', 'Created Date'),
			'updated_date' => Yii::t('app', 'Updated Date'),
			'author' => Yii::t('app', 'Author'),
			'email' => Yii::t('app', 'Email'),
			'url' => Yii::t('app', 'Url'),
			'post_id' => null,
			'post' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('content', $this->content, true);
		$criteria->compare('status', $this->status, true);
		$criteria->compare('created_date', $this->created_date, true);
		$criteria->compare('updated_date', $this->updated_date, true);
		$criteria->compare('author', $this->author, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('url', $this->url, true);
		$criteria->compare('post_id', $this->post_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	/**
     * Apply Formating to Date before Saving
     */
    public function beforeSave() {

        if ($this->isNewRecord) {
			$this->created_date = new CDbExpression('NOW()');
        } 

		$this->updated_date = date('Y-m-d h:i:s',time());

        return parent::beforeSave();
    }
}