<?php

/**
 * This is the model base class for the table "event_invitation".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "EventInvitation".
 *
 * Columns in table "event_invitation" available as properties of the model,
 * followed by relations of table "event_invitation" available as properties of the model.
 *
 * @property integer $id
 * @property integer $user_id
 * @property string $event_name
 * @property string $event_cordinator
 * @property string $email
 * @property string $event_type
 * @property string $total_members
 * @property string $event_desc
 * @property string $outside_activity
 * @property integer $cost_per_person
 * @property string $requirement_1
 * @property string $requirement_2
 * @property string $requirement_3
 * @property string $event_startdate
 * @property string $event_enddate
 * @property string $location
 * @property string $city
 * @property string $state
 * @property string $country
 * @property string $attached_itinerary
 * @property string $created_date
 * @property string $status
 *
 * @property Users $user
 */
abstract class BaseEventInvitation extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'event_invitation';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'EventInvitation|EventInvitations', $n);
	}

	public static function representingColumn() {
		return 'event_name';
	}

	public function rules() {
		return array(
			array('user_id, event_name, event_cordinator, email, event_type, total_members, event_desc, cost_per_person, event_startdate, event_enddate, location, city, state, country, attached_itinerary, created_date', 'required'),
			array('user_id, cost_per_person', 'numerical', 'integerOnly'=>true),
			array('event_name, event_cordinator, email, event_type, total_members, event_desc, location, city, state, country', 'length', 'max'=>250),
			array('outside_activity, status', 'length', 'max'=>1),
			array('requirement_1, requirement_2, requirement_3', 'length', 'max'=>2),
			array('attached_itinerary', 'length', 'max'=>255),
			array('outside_activity, requirement_1, requirement_2, requirement_3, status', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, user_id, event_name, event_cordinator, email, event_type, total_members, event_desc, outside_activity, cost_per_person, requirement_1, requirement_2, requirement_3, event_startdate, event_enddate, location, city, state, country, attached_itinerary, created_date, status', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'Users', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'user_id' => null,
			'event_name' => Yii::t('app', 'Event Name'),
			'event_cordinator' => Yii::t('app', 'Event Cordinator'),
			'email' => Yii::t('app', 'Email'),
			'event_type' => Yii::t('app', 'Event Type'),
			'total_members' => Yii::t('app', 'Total Members'),
			'event_desc' => Yii::t('app', 'Event Desc'),
			'outside_activity' => Yii::t('app', 'Outside Activity'),
			'cost_per_person' => Yii::t('app', 'Cost Per Person'),
			'requirement_1' => Yii::t('app', 'Requirement 1'),
			'requirement_2' => Yii::t('app', 'Requirement 2'),
			'requirement_3' => Yii::t('app', 'Requirement 3'),
			'event_startdate' => Yii::t('app', 'Event Startdate'),
			'event_enddate' => Yii::t('app', 'Event Enddate'),
			'location' => Yii::t('app', 'Location'),
			'city' => Yii::t('app', 'City'),
			'state' => Yii::t('app', 'State'),
			'country' => Yii::t('app', 'Country'),
			'attached_itinerary' => Yii::t('app', 'Attached Itinerary'),
			'created_date' => Yii::t('app', 'Created Date'),
			'status' => Yii::t('app', 'Status'),
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('event_name', $this->event_name, true);
		$criteria->compare('event_cordinator', $this->event_cordinator, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('event_type', $this->event_type, true);
		$criteria->compare('total_members', $this->total_members, true);
		$criteria->compare('event_desc', $this->event_desc, true);
		$criteria->compare('outside_activity', $this->outside_activity, true);
		$criteria->compare('cost_per_person', $this->cost_per_person);
		$criteria->compare('requirement_1', $this->requirement_1, true);
		$criteria->compare('requirement_2', $this->requirement_2, true);
		$criteria->compare('requirement_3', $this->requirement_3, true);
		$criteria->compare('event_startdate', $this->event_startdate, true);
		$criteria->compare('event_enddate', $this->event_enddate, true);
		$criteria->compare('location', $this->location, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('state', $this->state, true);
		$criteria->compare('country', $this->country, true);
		$criteria->compare('attached_itinerary', $this->attached_itinerary, true);
		$criteria->compare('created_date', $this->created_date, true);
		$criteria->compare('status', $this->status, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}